notas = [80, 61, 77, 83, 60]
cursos =[ "Matematica Discreta", "Algoritmos", "Contabilidad", "Algebra lineal", "Precalculo"]

#Buscar curso por nombre (búsqueda binaria)
def buscar_curso_binario(cursos, notas):
    # Ordenar cursos alfabéticamente y sincronizar notas
    #combina cada curso con su nota en pares, unidas.
    cursos, notas = zip(*sorted(zip(cursos, notas), key=lambda x: x[0].lower()))
    cursos = list(cursos)
    notas = list(notas)

    # Pedir el nombvre del curso a buscar
    nombre_buscar = input("Ingrese el nombre del curso a buscar: ").strip().lower()

    # funcion busqueda binaria
    #min y max son los índices de los extremos de la lista que aún se están considerando en el bucle
    min = 0
    max = len(cursos) - 1
    #sigue buscando mientras haya elementos por revisar.
    while min <= max:
        #se crea una variable medio para  el índice de la posición central.
        medio = (min + max) // 2
        #nombre del curso en esa posición, convertido a minúsculas.
        curso_medio = cursos[medio].lower()
        if curso_medio == nombre_buscar:
            print(f"Curso encontrado: {cursos[medio]} - Nota: {notas[medio]}")
            return medio
        elif curso_medio < nombre_buscar:
            min = medio + 1
        else:
            max = medio - 1

    print("Curso no encontrado.")
    return -1

#Ordenamineto Alfabetico
def ordenar_cursos_por_nombre(cursos, notas):
    #cantidad de elementos en la lista
    n = len(cursos)
    #Comienza desde el segundo elemento (índice 1) porque el primer elemento (índice 0) se considera ya "ordenado"
    for i in range(1, n):
        #Se guardan temporalmente el curso y la nota que se van a insertar en la posición correcta.
        curso_actual = cursos[i]
        nota_actual = notas[i]
        #j apunta al índice del elemento anterior al elemento  actual.
        j = i - 1
        # Mover los cursos mayores que curso_actual una posición adelante
        while j >= 0 and cursos[j].lower() > curso_actual.lower():
            #Mientras j >= o y el curso en la posición j sea alfabéticamente mayor que curso_actual, se ejecuta el ciclo.
            #Se mueve el curso y la nota en la posición j una posición a la derecha
            cursos[j + 1] = cursos[j]
            notas[j + 1] = notas[j]
            j -= 1
        # Insertar el curso y nota en la posición correcta
        cursos[j + 1] = curso_actual
        notas[j + 1] = nota_actual
    # Mostrar lista ordenada
    print("Cursos ordenados por nombre:")
    for i in range(n):
        print(f"{i+1}. {cursos[i]} - Nota: {notas[i]}")


#Ordenamineto Burbuja
def ordenar_cursos_por_nota(cursos, notas):
    #cantidad de elementos de la lista
    n = len(notas)
    # Controla cuantas veces debemos pasar la sobre la lista
    for i in range(n):
        #recorre la lista desde el inicio hasta el elemento antes del último ordenado.
        #Compara elementos adyacentes para decidir si deben intercambiarse.
        for j in range(0, n - i - 1):
            #Compare la nota actual con la siguiente.Si la nota actual es menor que la siguiente, significa que están en orden incorrecto para un orden descendente.
            #se intercambian para que la nota mayor quede primero.
            if notas[j] < notas[j + 1]:
                # Intercambiar notas
                notas[j], notas[j + 1] = notas[j + 1], notas[j]
                # Intercambiar cursos para mantener sincronía
                cursos[j], cursos[j + 1] = cursos[j + 1], cursos[j]
    # Mostrar lista ordenada
    print("Cursos ordenados por nota (descendente):")
    for i in range(n):
        print(f"{i+1}. {cursos[i]} - Nota: {notas[i]}")
ordenar_cursos_por_nota(cursos, notas)

#Eliminar un Curso
def Eliminar_Curso():
    #pedir el curso que desea eliminar
    Eliminar = input("Ingrese el nombre del Curso a eliminar: ").strip()
    # Se creo lista en minúsculas para buscar y comparar a mayúsculas/ y minusculas.
    cursos_lower = [c.lower() for c in cursos]
    #si coincide
    if Eliminar.lower() in cursos_lower:
        indice = cursos_lower.index(Eliminar.lower())
        curso_eliminado = cursos.pop(indice)
        nota_eliminada = notas.pop(indice)
        print(f"Se eliminó el curso '{curso_eliminado}' con la nota {nota_eliminada}.")
        #si no coincide
    else:
        print(f"El curso '{Eliminar}' no se encuentra registrado.")

#Actualizar nota de un curso
def Actualizar_Nota_De_Cursos():
#Muestra los cursos que se encuentran en el sistema
    print("Cursos Disponibles en el Sistema:")
    for curso in cursos:
        print(f"- {curso}")
    Nombre = input("Ingrese el nombre del curso: ").strip()
    # Buscar curso ignorando mayúsculas/minúsculas .lower
    #for c in cursos = recorre cada elemento de la lista cursos (uno por uno).
    #c.lower() = transforma cada curso a minúsculas.
    #[ ... ] → guarda todos los resultados en una lista nueva.
    cursos_lower = [c.lower() for c in cursos]
    if Nombre.lower() in cursos_lower:
        #.index(valor) es un método de listas en Python que devuelve la posición (índice) donde aparece por primera vez el valor dentro de la lista.
        indice = cursos_lower.index(Nombre.lower())
        try:
        #pedir la nueva nota
            nueva_nota = float(input(f"Ingrese la nueva nota para {cursos[indice]}: "))
            if 0 <= nueva_nota <= 100:
                notas[indice] = nueva_nota
                print(f"Nota actualizada para el curso {cursos[indice]}.")
            else:
                print("La nota debe estar entre 0 y 100.")
        except ValueError:
            print("Por favor, ingrese un número válido para la nota.")
    else:
        print(f"El curso '{Nombre}' no se encuentra registrado aun en el Sistema.")

#Buscar curso por nombre
def Buscar_curso():
    if not cursos:
        print("No hay cursos registrados.\n")
        return
    
    nombre = input("Ingrese el nombre (o parte) del curso a buscar: ").strip().lower() #.lower convierte todo a minúsculas
    #Si encuentra cursos que coincidan con la búsqueda, los guardará aquí
    encontrados = []
    #recorre la lista obteniendo el índice i y el nombre del curso.
    for i, curso in enumerate(cursos):
        if nombre in curso.lower():  # coincidencia parcial, se buscan semenjanzas en la escritura
            #se guarda el resultado cuando encuentra un curso que coincide con lo que escribió,
            encontrados.append((curso, notas[i]))
    #notas[i] sirve para enlazar la nota que corresponde al curso con el mismo índice.
    #la lista tiene elementos encontrados.
    if encontrados:
        print("Cursos encontrados:")
        for curso, nota in encontrados:
            print(f"- {curso} =  Nota: {nota}")
        print()
        #Si está vacía
    else:
        print("No se encontró ningún curso con ese nombre.\n")
        input("Presione enter para continuar")

def Aprobados_Reprobados():
    #si la lista está vacía,retornara un mensaje
    if not notas:
        print("No hay notas registradas.\n")
        return
    #Se crean dos variables para llevar la cuenta de cuantos reprobados y reprobados
    aprobados = 0
    reprobados = 0
    #Toma cada elemento de la lista notas uno por uno, nota por nota
    for nota in notas:
        #si la nota nota es mayor o igual que 60
        if nota >= 60:
            aprobados += 1
        #si no
        else:
            reprobados += 1
    
    print(f"Cursos aprobados: {aprobados}")
    print(f"Cursos reprobados: {reprobados}\n")
    input("Presione enter para continuar")

#Mostrar cursos y notas previamente registrados
def Mostrar_cursos_notas():
    # si no hay cursos
    #Zip combina ambas listas, enumerate(..., start=1) le asigna un valos a cada dato desde 1
    #for i, en cada fila toma 1 curso y un nombre
    if not cursos:
        print("No hay cursos ni notas para mostrar\n")
        return
    #  si hay cursos, mostrarlos
    else:
       print("\nCursos y notas registrados:")
       for i in range(len(cursos)): #len contar la cantidad de elementos que tiene una lista, enera un ciclo desde 0 hasta el tamaño de la lista menos 1
           print(f"{i+1}. {cursos [i]} - Nota: {notas [i]}")
           

#Registrar curso
def Registro_Curso():
    # pedir el nombre del curso
    nombre = input("Ingrese el nombre del nuevo curso:\n ").strip()
    nota = 0

    # si el nombre está vacío
    if not nombre:
        print("El nombre no debe estar vacío.\n")
        return  # salir de la función, try intenta ejecutar el codigo

    # pedir la nota del curso
    try:
        nota = float(input("Ingrese la nota obtenida en ese curso:\n "))
    except ValueError:#si falla, #ValueError que es ocurre cuando el tipo de dato es correcto, pero el valor no tiene sentido para la operación.
        print("La nota debe ser un número.\n")
        return

    # validar rango de la nota
    if nota < 0 or nota > 100:
        print("La nota no está en el rango de 0 a 100.\n")
        return
    else:# guardar el curso y nota
        cursos.append(nombre)
        notas.append(nota)
        print(f"Curso '{nombre}' con nota {nota} registrado correctamente.\n")
        input("Presione enter para continuar")

#calcular promedio
def Calcular_promedio():
     promedio = sum(notas) / len(notas)  # Suma todas las notas y divide entre el total de elementos len
     print(f"El promedio General es:{promedio:.2f}")
     promedio = 0
     if not notas:
        print("No hay notas para calcular el promedio.\n")
        return
     
     
#Menu principal del gestor de notas
def mostrar_menu():
    print("====== GESTOR DE NOTAS ACADÉMICAS ======")
    print("1. Registrar Curso")
    print("2. Mostrar curso")
    print("3. Calcular promedio")
    print("4. Contar Cursos Aprobados/Reprobados")
    print("5. Buscar Curso por nombre")
    print("6. Actualizar nota de un curso")
    print("7. Eliminar un curso")
    print("8. Ordenar cursos por nota (ordenamiento burbuja)")
    print("9. Ordenar cursos por nombre (ordenamiento inserción)")
    print("10. Buscar curso por nombre (búsqueda binaria)")
    
   

while True:
    mostrar_menu()
    opcion = input("Seleccione una opción: ")
    if opcion == "1":
        Registro_Curso()
    elif opcion =="2":
        Mostrar_cursos_notas()
    elif opcion == "3":
        Calcular_promedio()
    elif opcion == "4":
        Aprobados_Reprobados()
    elif opcion == "5":
        Buscar_curso()
    elif opcion == "6":
        Actualizar_Nota_De_Cursos()
    elif opcion == "7":
        Eliminar_Curso()
    elif opcion == "8":
        ordenar_cursos_por_nota(cursos, notas)
    elif opcion == "9":
        ordenar_cursos_por_nombre(cursos, notas)
    elif opcion == "10":
        buscar_curso_binario(cursos, notas)
       
